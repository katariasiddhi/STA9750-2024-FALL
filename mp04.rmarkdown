---
title: "Electoral College Project - MiniProject #04"
author: "Siddhi Kataria"
date: "2024-11-13"
output:
  html_document:
    toc: true
    theme: cosmo
---





















































## Introduction:

### Project Overview: Analyzing Electoral College Vote Allocation and Election Fairness

This project explores the fairness and impact of different **Electoral College Vote (ECV) allocation schemes** in the U.S. presidential election process. The Electoral College, a unique feature of the American electoral system, plays a critical role in determining the outcome of presidential elections. However, questions about the fairness of the current **Winner-Takes-All (WTA)** system have sparked ongoing debate, especially in cases where a candidate wins the popular vote but loses the Electoral College. This project examines alternative ECV allocation methods, such as **Proportional Representation**, the **District Method**, and the **National Popular Vote (NPV)**, to determine how they might affect election outcomes and improve the system’s representation of the popular will.

### Project Goals

1.  **Visualize Electoral College Allocation Schemes**: Using data and maps, I will create visualizations to show how different ECV allocation methods would impact election results. This includes an animated choropleth map that represents shifts over time in the distribution of Electoral College votes by party under different allocation schemes.

2.  **Analyze the Fairness of Allocation Schemes**: I will compare the results of the Winner-Takes-All system to alternative methods, assessing which method better represents the overall voting population. The analysis will focus on the **2000 U.S. Presidential Election** as a case study due to its controversial outcome and narrow margins, highlighting how each allocation method would affect the result.

3.  **Evaluate ECV Scheme Impact on Electoral Outcomes**: By applying each ECV scheme to historical election data, I aim to identify scenarios where the allocation scheme would have significantly altered the result. I will use historical data from presidential elections between 1976 and 2020 to study changes in Electoral College outcomes under different methods.

4.  **Discuss Policy Implications**: My findings will contribute to discussions on Electoral College reform, examining whether more representative allocation methods, such as Proportional Representation or the National Popular Vote, would create a fairer electoral system.

### Project Structure

1.  **Data Collection and Processing**: Download and process Congressional shapefiles and election data for each election cycle under study, focusing on creating maps that illustrate each state’s Electoral College results over time.

2.  **Advanced Visualization Techniques**: Create animated and faceted visualizations that represent Electoral College allocations by state and year. This includes using geospatial transformations to ensure consistent mapping for comparison.

3.  **Fact Check and Fairness Evaluation**: Analyze each allocation method’s impact on historical election outcomes, determining the alignment with the popular vote. I will provide an in-depth fact check on the 2000 election and explore how different allocation methods could have produced different outcomes.

Through these steps, this project aims to shed light on how different ECV schemes could transform U.S. presidential elections, helping to inform discussions on potential Electoral College reforms that could enhance fairness and better reflect the voice of American voters.

The United States' Electoral College system is frequently debated for its fairness in representing voters' preferences. This project explores alternative Electoral College allocation methods---proportional and district-based allocation---against the traditional winner-take-all approach. By analyzing election data, the goal is to evaluate whether these alternative methods could yield more representative outcomes and potentially reduce discrepancies between the popular vote and election results.

## Set-Up and Initial Exploration

### **Data I: US House Election Votes from 1976 to 2022**





















































```{r}
# Load necessary libraries
library(dplyr)

# Load the House election data
house_data <- read.csv("/Users/siddhikataria/Downloads/1976-2022-house.csv")

# Load the Presidential vote data
presidential_data <- read.csv("/Users/siddhikataria/Downloads/1976-2020-president.csv")

# Inspect both data structures
str(house_data)
head(house_data)
str(presidential_data)
head(presidential_data)
```





















































### **Data II: Congressional Boundary Files 1976 to 2012**





















































```{r}

# List of URLs for the shapefiles
urls <- c(
  "https://cdmaps.polisci.ucla.edu/shp/districts001.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts002.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts003.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts004.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts005.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts006.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts007.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts008.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts009.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts010.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts011.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts012.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts013.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts014.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts015.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts016.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts017.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts018.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts019.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts020.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts021.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts022.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts023.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts024.zip",
  "https://cdmaps.polisci.ucla.edu/shp/districts025.zip"
)

# Directory to save the downloaded files
save_directory <- "congressional_shapefiles"

# Create directory if it does not exist
if (!dir.exists(save_directory)) {
  dir.create(save_directory)
}

# Loop through each URL and download the file if not already present
for (url in urls) {
  # Extract the file name from the URL
  file_name <- basename(url)
  file_path <- file.path(save_directory, file_name)
  
  # Check if the file already exists to avoid re-downloading
  if (!file.exists(file_path)) {
    cat("Downloading", file_name, "...\n")
    # Download file
    download.file(url, file_path, mode = "wb")
    cat(file_name, "downloaded successfully.\n")
  } else {
    cat(file_name, "already exists, skipping download.\n")
  }
}

```





















































### **Data III: Congressional Boundary Files 2014 to Present**





















































```{r}

# Define base URLs for each year
base_urls <- list(
  "2014" = "https://www2.census.gov/geo/tiger/TIGER2014/CD/",
  "2015" = "https://www2.census.gov/geo/tiger/TIGER2015/CD/",
  "2016" = "https://www2.census.gov/geo/tiger/TIGER2016/CD/",
  "2017" = "https://www2.census.gov/geo/tiger/TIGER2017/CD/",
  "2018" = "https://www2.census.gov/geo/tiger/TIGER2018/CD/",
  "2019" = "https://www2.census.gov/geo/tiger/TIGER2019/CD/",
  "2020" = "https://www2.census.gov/geo/tiger/TIGER2020/CD/",
  "2021" = "https://www2.census.gov/geo/tiger/TIGER2021/CD/",
  "2022" = "https://www2.census.gov/geo/tiger/TIGER2022/CD/"
)

# Congressional district codes per year
congress_sessions <- list(
  "2014" = "113", "2015" = "114", "2016" = "114", "2017" = "115",
  "2018" = "115", "2019" = "116", "2020" = "116", "2021" = "117",
  "2022" = "117"
)

# Directory to save the downloaded files
save_directory <- "census_shapefiles"

```





















































#### **Initial Exploration of Vote Count Data**





















































```{r}
# Load the necessary libraries
library(dplyr)
library(tidyr)

# Read in the house data file
house_data <- read.csv("/Users/siddhikataria/Downloads/1976-2022-house.csv", header = TRUE)

head(house_data)

```

```{r}

# Load the house data file
house_data <- read.csv("/Users/siddhikataria/Downloads/1976-2022-house.csv", header = TRUE)

# Filter and summarize the seat counts
seat_changes <- house_data %>%
  filter(year %in% c(1976, 2022)) %>%
  group_by(state, year) %>%
  summarise(seat_count = n_distinct(district), .groups = 'drop') %>%
  pivot_wider(names_from = year, values_from = seat_count, names_prefix = "year_") %>%
  mutate(seat_change = year_2022 - year_1976) %>%
  arrange(desc(seat_change))

# Display the result
print(seat_changes)



```





















































### **Importing and Plotting Shape File Data**





















































```{r}
library(ggplot2)
library(sf)

if(!file.exists("nyc_borough_boundaries.zip")){
    download.file("https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile", 
              destfile="nyc_borough_boundaries.zip")
}

##-
td <- tempdir(); 
zip_contents <- unzip("nyc_borough_boundaries.zip", 
                      exdir = td)
    
fname_shp <- zip_contents[grepl("shp$", zip_contents)]
nyc_sf <- read_sf(fname_shp)
nyc_sf
```





















































#### **Task 4. Automate Zip File**





















































```{r}
ggplot(nyc_sf, 
       aes(geometry=geometry)) + 
    geom_sf()
```

```{r}

ggplot(nyc_sf, 
       aes(geometry=geometry, 
           fill = shape_area)) + 
    geom_sf()
```





















































#### **Task 5: Chloropleth Visualization of the 2000 Presidential Election Electoral College Results**





















































```{r}
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(maps)

# Read in the data
president_data <- read.csv("/Users/siddhikataria/Downloads/1976-2020-president.csv", header = TRUE)

# Filter data for the 2000 election
president_data_2000 <- president_data %>%
  filter(year == 2000)

# Select relevant columns
president_data_2000 <- president_data_2000 %>%
  select(state, party_simplified, candidatevotes, totalvotes)

# Standardize state names to lowercase to match map data
president_data_2000$state <- tolower(president_data_2000$state)

# Calculate the winning party in each state based on who received the most votes
president_data_2000 <- president_data_2000 %>%
  group_by(state) %>%
  arrange(desc(candidatevotes)) %>%
  slice(1) %>%
  ungroup()

# Get the map data for the states
us_map <- map_data("state")

# Merge the map data with the election results
map_data_merged <- left_join(us_map, president_data_2000, by = c("region" = "state"))

# Create the chloropleth map
ggplot(map_data_merged, aes(x = long, y = lat, group = group, fill = party_simplified)) +
  geom_polygon(color = "white") +
  scale_fill_manual(values = c("red", "blue")) +  # Red for Republican, Blue for Democrat
  labs(title = "2000 U.S. Presidential Election Results",
       fill = "Party") +
  theme_minimal() +
  theme(legend.position = "bottom")

```





















































##### Part B.





















































```{r}
# Load Alaska and Hawaii data (as separate maps)
alaska_map <- map_data("state") %>%
  filter(region == "alaska")

hawaii_map <- map_data("state") %>%
  filter(region == "hawaii")

# Plot with inset Alaska and Hawaii
ggplot(map_data_merged, aes(x = long, y = lat, group = group, fill = party_simplified)) +
  geom_polygon(color = "white") +
  scale_fill_manual(values = c("red", "blue")) +  # Red for Republican, Blue for Democrat
  labs(title = "2000 U.S. Presidential Election Results",
       fill = "Party") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  # Add Alaska and Hawaii inset maps
  annotation_custom(ggplotGrob(ggplot() + geom_polygon(data = alaska_map, aes(x = long, y = lat, group = group), fill = "gray70", color = "white") +
                                theme_void()), xmin = -165, xmax = -130, ymin = 10, ymax = 40) +
  annotation_custom(ggplotGrob(ggplot() + geom_polygon(data = hawaii_map, aes(x = long, y = lat, group = group), fill = "gray70", color = "white") +
                                theme_void()), xmin = -160, xmax = -140, ymin = 15, ymax = 30)

```





















































#### Task 6: Advanced Chloropleth Visualization of Electoral College Results





















































```{r}
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)

# Read the data (modify the paths as needed)
president_data <- read.csv("/Users/siddhikataria/Downloads/1976-2020-president.csv", header = TRUE)

# Filter the data for presidential elections (you can adjust the years here)
president_data_filtered <- president_data %>%
  filter(year %in% c(1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)) %>%
  select(year, state, party_simplified, candidatevotes, totalvotes)

# Calculate the winner for each state by checking the maximum candidate votes
president_data_filtered <- president_data_filtered %>%
  group_by(year, state) %>%
  mutate(winner = if_else(candidatevotes == max(candidatevotes), party_simplified, NA_character_)) %>%
  ungroup()

# Convert the state names in 'state' column to lowercase to match map_data regions
president_data_filtered <- president_data_filtered %>%
  mutate(state = tolower(state))

# Now load the state map data (use 'map_data()' to get the state shapes)
map_data_merged <- map_data("state") %>%
  left_join(president_data_filtered, by = c("region" = "state"))

# Check for any missing data after the join (this could indicate problems with the merge)
summary(map_data_merged)

# Create the faceted map
ggplot(map_data_merged, aes(x = long, y = lat, group = group, fill = winner)) +
  geom_polygon(color = "white") +
  scale_fill_manual(values = c("red", "blue", "gray70")) +  # Red for Republican, Blue for Democrat, Gray for NA
  labs(title = "U.S. Presidential Election Results Over Time",
       fill = "Party") +
  theme_minimal() +
  theme(legend.position = "bottom", 
        strip.text = element_text(size = 12)) +  # Adjust facet label size
  facet_wrap(~year) +  # Facet by year
  coord_fixed()  # Ensure map aspect ratio is correct

```

```{r}

# Load required libraries
library(ggplot2)
library(dplyr)
library(maps)
library(gganimate)

# Read the data
president_data <- read.csv("/Users/siddhikataria/Downloads/1976-2020-president.csv", header = TRUE)

# Filter the data for presidential elections 
president_data_filtered <- president_data %>%
  filter(year %in% c(1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)) %>%
  select(year, state, party_simplified, candidatevotes, totalvotes)

# Calculate the winner for each state by checking the maximum candidate votes
president_data_filtered <- president_data_filtered %>%
  group_by(year, state) %>%
  mutate(winner = if_else(candidatevotes == max(candidatevotes), party_simplified, NA_character_)) %>%
  ungroup()

# Convert the state names in 'state' column to lowercase to match map_data regions
president_data_filtered <- president_data_filtered %>%
  mutate(state = tolower(state))

# Now load the state map data 
map_data_merged <- map_data("state") %>%
  left_join(president_data_filtered, by = c("region" = "state"))

# Check for any missing data after the join
summary(map_data_merged)

# Create the animated map
animated_plot <- ggplot(map_data_merged, aes(x = long, y = lat, group = group, fill = winner)) +
  geom_polygon(color = "white") +
  scale_fill_manual(values = c("red", "blue", "gray70")) +  # Red for Republican, Blue for Democrat, Gray for NA
  labs(title = "U.S. Presidential Election Results Over Time", 
       fill = "Party") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  coord_fixed() +
  transition_time(year) +  # Animate over 'year'
  ease_aes('linear')  # Smooth transitions between years

# Render the animation (ensure you have the necessary renderer for gganimate)
animate(animated_plot, nframes = 50, duration = 10, width = 800, height = 600, renderer = gifski_renderer())
```





















































**\*Note: I had to remove the code to render my file but you will find the GIF on my Github.**

To evaluate the fairness of different **Electoral College Vote (ECV) allocation schemes**, we must first define a fair system and then compare how various schemes impact the election results, especially in close elections. The most common ECV allocation schemes include:

1.  **Winner-Takes-All (WTA)**: The candidate with the most votes in a state gets all the Electoral Votes (EVs) of that state.

2.  **Proportional Representation**: EVs are distributed proportionally based on the percentage of votes each candidate receives in the state.

3.  **District Method**: EVs are split by congressional district vote, with the remaining two EVs allocated to the statewide winner.

4.  **National Popular Vote (NPV)**: The winner of the nationwide popular vote receives all EVs (though this would require a national agreement, as the system is not in place currently).

### Step 1: Defining the "Fairest" Allocation Scheme

A fair scheme should meet the following criteria:

-   **Representation of Popular Vote**: The scheme should reflect the preferences of the majority of voters in a manner that avoids distortion.

-   **Minimizing Disproportionate Influence**: Smaller states should not have disproportionate influence over the outcome.

-   **Preventing Gerrymandering**: The scheme should not be susceptible to manipulation, such as gerrymandering or strategically placing districts.

Given these criteria, the **Proportional Representation** system may be considered the fairest because it more accurately represents the voters' will by allocating EVs proportionally. It ensures that states with differing political preferences are represented fairly, and it avoids the “winner-takes-all” phenomenon, which can result in a candidate winning most of a state's EVs despite losing the vote by a small margin.

### Step 2: Comparing Results Under Different Schemes

To conduct the fact check, we can look at one of the recent U.S. Presidential Elections where the ECV allocation schemes had a significant impact. The **2000 U.S. Presidential Election** is a good example, as it had one of the most controversial outcomes.

-   **2000 Election Overview**:

    -   The election between **George W. Bush** and **Al Gore** ended with Bush winning the Electoral College by 271 to 266 votes, even though Gore won the **popular vote** by around 500,000 votes.

    -   The controversy stemmed from **Florida**, where Bush narrowly won the state by just 537 votes, giving him 25 EVs. If Gore had won Florida, he would have won the presidency despite losing the popular vote.

### Step 3: Evaluating Impact Under Different Schemes

Let’s examine the **2000 election** results under the following allocation schemes:

1.  **Winner-Takes-All (WTA)**:

    -   Under this scheme, **Florida’s 25 EVs** went entirely to **Bush**, despite the very close popular vote margin. This contributed to Bush’s victory.

2.  **Proportional Representation**:

    -   If Florida had used **proportional allocation**, the 25 EVs might have been split based on the popular vote percentages. In 2000, Bush received about 48.8% of the vote, and Gore received 47.9%. Under proportional representation, this could result in a near split of EVs (e.g., 13 for Bush and 12 for Gore), or something very close, depending on rounding.

    -   This would have meant **Gore** could have won more than 270 EVs and secured the presidency, even though Bush won the state’s popular vote by a small margin.

3.  **District Method**:

    -   If Florida had used the **district method**, the EVs would have been allocated based on congressional district results. Florida has 25 EVs, and most of them would have been allocated to the candidate who won the district. The remaining two EVs would go to the statewide winner. Since the districts in Florida in 2000 were generally divided between Democrats and Republicans, Bush likely would have received a majority of the congressional districts, but Gore could have gained a few as well.

    -   This would likely have resulted in a split, with Bush still winning the majority of the EVs, but potentially less so than under the WTA system.

4.  **National Popular Vote**:

    -   Under the **National Popular Vote** system, the winner of the national popular vote would have won the election. In 2000, **Gore** won the popular vote by over 500,000 votes, meaning he would have won the presidency under the NPV system, regardless of the Florida outcome.

### Step 4: Conclusion and Analysis

-   **Impact of ECV Scheme on the 2000 Election**:

    -   The **Winner-Takes-All** scheme played a significant role in Bush’s victory despite Gore winning the popular vote. If Florida had used **proportional allocation**, it’s likely Gore would have received more than half of the EVs from Florida, thus securing a narrow victory in the Electoral College.

    -   If the **National Popular Vote** system had been in place, Gore would have won the election outright, given his popular vote lead.

-   **Fairness Evaluation**:

    -   **Proportional Representation** seems like a fairer system, as it would have more accurately represented the voting preferences in each state, especially in close elections like 2000.

    -   The **Winner-Takes-All** system often distorts the results, giving too much weight to narrow victories in key states, which undermines the principle of one person, one vote.

    -   **National Popular Vote** is also fair because it directly reflects the choice of the majority of voters, reducing the chance for a mismatch between the popular vote and the Electoral College outcome.

**Conclusion**:\
The **Proportional Representation** scheme is likely the fairest of the allocation methods, especially in close elections like 2000. The **National Popular Vote** is also a fair system, though it would require substantial changes to the U.S. electoral system to implement. The **Winner-Takes-All** system, while effective in providing a clear and quick result, can be seen as unfair, particularly in closely contested elections.














